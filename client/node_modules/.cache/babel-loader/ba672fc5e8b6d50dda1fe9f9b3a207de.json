{"ast":null,"code":"import * as React from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { QueriesObserver, notifyManager } from '@tanstack/query-core';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nimport { useIsRestoring } from './isRestoring.mjs';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary.mjs';\nimport { ensurePreventErrorBoundaryRetry, useClearResetErrorBoundary, getHasError } from './errorBoundaryUtils.mjs'; // - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\n\nfunction useQueries(_ref) {\n  let {\n    queries,\n    context\n  } = _ref;\n  const queryClient = useQueryClient({\n    context\n  });\n  const isRestoring = useIsRestoring();\n  const defaultedQueries = React.useMemo(() => queries.map(options => {\n    const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure the results are already in fetching state before subscribing or updating options\n\n    defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic';\n    return defaultedOptions;\n  }), [queries, queryClient, isRestoring]);\n  const [observer] = React.useState(() => new QueriesObserver(queryClient, defaultedQueries));\n  const result = observer.getOptimisticResult(defaultedQueries);\n  useSyncExternalStore(React.useCallback(onStoreChange => isRestoring ? () => undefined : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, {\n      listeners: false\n    });\n  }, [defaultedQueries, observer]);\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  defaultedQueries.forEach(query => {\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary);\n  });\n  useClearResetErrorBoundary(errorResetBoundary);\n  const firstSingleResultWhichShouldThrow = result.find((singleResult, index) => {\n    var _defaultedQueries$ind, _defaultedQueries$ind2;\n\n    return getHasError({\n      result: singleResult,\n      errorResetBoundary,\n      useErrorBoundary: (_defaultedQueries$ind = (_defaultedQueries$ind2 = defaultedQueries[index]) == null ? void 0 : _defaultedQueries$ind2.useErrorBoundary) != null ? _defaultedQueries$ind : false,\n      query: observer.getQueries()[index]\n    });\n  });\n\n  if (firstSingleResultWhichShouldThrow != null && firstSingleResultWhichShouldThrow.error) {\n    throw firstSingleResultWhichShouldThrow.error;\n  }\n\n  return result;\n}\n\nexport { useQueries };","map":{"version":3,"mappings":";;;;;;qHAgBA;;AA+HO,SAASA,UAAT,OAMe;EAAA,IANsB;IAC1CC,OAD0C;IAE1CC;EAF0C,CAMtB;EACpB,MAAMC,WAAW,GAAGC,cAAc,CAAC;IAAEF;EAAF,CAAD,CAAlC;EACA,MAAMG,WAAW,GAAGC,cAAc,EAAlC;EAEA,MAAMC,gBAAgB,GAAGC,KAAK,CAACC,OAAND,CACvB,MACEP,OAAO,CAACS,GAART,CAAaU,OAAD,IAAa;IACvB,MAAMC,gBAAgB,GAAGT,WAAW,CAACU,mBAAZV,CAAgCQ,OAAhCR,CAAzB,CADuB;;IAIvBS,gBAAgB,CAACE,kBAAjBF,GAAsCP,WAAW,GAC7C,aAD6C,GAE7C,YAFJO;IAIA,OAAOA,gBAAP;EARF,EAFqBJ,EAYvB,CAACP,OAAD,EAAUE,WAAV,EAAuBE,WAAvB,CAZuBG,CAAzB;EAeA,MAAM,CAACO,QAAD,IAAaP,KAAK,CAACQ,QAANR,CACjB,MAAM,IAAIS,eAAJ,CAAoBd,WAApB,EAAiCI,gBAAjC,CADWC,CAAnB;EAIA,MAAMU,MAAM,GAAGH,QAAQ,CAACI,mBAATJ,CAA6BR,gBAA7BQ,CAAf;EAEAK,oBAAoB,CAClBZ,KAAK,CAACa,WAANb,CACGc,aAAD,IACEjB,WAAW,GACP,MAAMkB,SADC,GAEPR,QAAQ,CAACS,SAATT,CAAmBU,aAAa,CAACC,UAAdD,CAAyBH,aAAzBG,CAAnBV,CAJRP,EAKE,CAACO,QAAD,EAAWV,WAAX,CALFG,CADkB,EAQlB,MAAMO,QAAQ,CAACY,gBAATZ,EARY,EASlB,MAAMA,QAAQ,CAACY,gBAATZ,EATY,CAApBK;EAYAZ,KAAK,CAACoB,SAANpB,CAAgB,MAAM;IACpB;IACA;IACAO,QAAQ,CAACc,UAATd,CAAoBR,gBAApBQ,EAAsC;MAAEe,SAAS,EAAE;IAAb,CAAtCf;EAHF,GAIG,CAACR,gBAAD,EAAmBQ,QAAnB,CAJHP;EAMA,MAAMuB,kBAAkB,GAAGC,0BAA0B,EAArD;EAEAzB,gBAAgB,CAAC0B,OAAjB1B,CAA0B2B,KAAD,IAAW;IAClCC,+BAA+B,CAACD,KAAD,EAAQH,kBAAR,CAA/BI;EADF;EAIAC,0BAA0B,CAACL,kBAAD,CAA1BK;EAEA,MAAMC,iCAAiC,GAAGnB,MAAM,CAACoB,IAAPpB,CAAY,CAACqB,YAAD,EAAeC,KAAf;IAAA;;IAAA,OACpDC,WAAW,CAAC;MACVvB,MAAM,EAAEqB,YADE;MAEVR,kBAFU;MAGVW,gBAAgB,qDAAEnC,gBAAgB,CAACiC,KAAD,CAAlB,KAAE,IAAF,GAAE,MAAF,GAAEG,uBAAyBD,gBAA3B,oCAA+C,KAHrD;MAIVR,KAAK,EAAEnB,QAAQ,CAAC6B,UAAT7B,GAAsByB,KAAtBzB;IAJG,CAAD,CADyC;EAAZ,EAA1C;;EASA,IAAIsB,iCAAJ,QAAIA,qCAAiC,CAAEQ,KAAvC,EAA8C;IAC5C,MAAMR,iCAAiC,CAACQ,KAAxC;EACD;;EAED,OAAO3B,MAAP;AACD","names":["useQueries","queries","context","queryClient","useQueryClient","isRestoring","useIsRestoring","defaultedQueries","React","useMemo","map","options","defaultedOptions","defaultQueryOptions","_optimisticResults","observer","useState","QueriesObserver","result","getOptimisticResult","useSyncExternalStore","useCallback","onStoreChange","undefined","subscribe","notifyManager","batchCalls","getCurrentResult","useEffect","setQueries","listeners","errorResetBoundary","useQueryErrorResetBoundary","forEach","query","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","firstSingleResultWhichShouldThrow","find","singleResult","index","getHasError","useErrorBoundary","_defaultedQueries$ind2","getQueries","error"],"sources":["/Users/yong/development/assignments/module6/capstone/node_modules/@tanstack/react-query/src/useQueries.ts"],"sourcesContent":["import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryFunction } from '@tanstack/query-core'\nimport { notifyManager, QueriesObserver } from '@tanstack/query-core'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseQueryOptions, UseQueryResult } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\n\n// This defines the `UseQueryOptions` that are accepted in `QueriesOptions` & `GetOptions`.\n// - `context` is omitted as it is passed as a root-level option to `useQueries` instead.\ntype UseQueryOptionsForUseQueries<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n> = Omit<UseQueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'context'>\n\n// Avoid TS depth-limit error in case of large array literal\ntype MAXIMUM_DEPTH = 20\n\ntype GetOptions<T> =\n  // Part 1: responsible for applying explicit type parameter to function arguments, if object { queryFnData: TQueryFnData, error: TError, data: TData }\n  T extends {\n    queryFnData: infer TQueryFnData\n    error?: infer TError\n    data: infer TData\n  }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryOptionsForUseQueries<unknown, TError, TData>\n    : // Part 2: responsible for applying explicit type parameter to function arguments, if tuple [TQueryFnData, TError, TData]\n    T extends [infer TQueryFnData, infer TError, infer TData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryOptionsForUseQueries<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryOptionsForUseQueries<TQueryFnData>\n    : // Part 3: responsible for inferring and enforcing type if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryOptionsForUseQueries<TQueryFnData, unknown, TData, TQueryKey>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, infer TQueryKey> }\n    ? UseQueryOptionsForUseQueries<\n        TQueryFnData,\n        unknown,\n        TQueryFnData,\n        TQueryKey\n      >\n    : // Fallback\n      UseQueryOptionsForUseQueries\n\ntype GetResults<T> =\n  // Part 1: responsible for mapping explicit type parameter to function result, if object\n  T extends { queryFnData: any; error?: infer TError; data: infer TData }\n    ? UseQueryResult<TData, TError>\n    : T extends { queryFnData: infer TQueryFnData; error?: infer TError }\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends { data: infer TData; error?: infer TError }\n    ? UseQueryResult<TData, TError>\n    : // Part 2: responsible for mapping explicit type parameter to function result, if tuple\n    T extends [any, infer TError, infer TData]\n    ? UseQueryResult<TData, TError>\n    : T extends [infer TQueryFnData, infer TError]\n    ? UseQueryResult<TQueryFnData, TError>\n    : T extends [infer TQueryFnData]\n    ? UseQueryResult<TQueryFnData>\n    : // Part 3: responsible for mapping inferred type to results, if no explicit parameter was provided\n    T extends {\n        queryFn?: QueryFunction<unknown, any>\n        select: (data: any) => infer TData\n      }\n    ? UseQueryResult<TData>\n    : T extends { queryFn?: QueryFunction<infer TQueryFnData, any> }\n    ? UseQueryResult<TQueryFnData>\n    : // Fallback\n      UseQueryResult\n\n/**\n * QueriesOptions reducer recursively unwraps function arguments to infer/enforce type param\n */\nexport type QueriesOptions<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryOptionsForUseQueries[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetOptions<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesOptions<[...Tail], [...Result, GetOptions<Head>], [...Depth, 1]>\n  : unknown[] extends T\n  ? T\n  : // If T is *some* array but we couldn't assign unknown[] to it, then it must hold some known/homogenous type!\n  // use this to infer the param types in the case of Array.map() argument\n  T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      infer TQueryKey\n    >[]\n  ? UseQueryOptionsForUseQueries<TQueryFnData, TError, TData, TQueryKey>[]\n  : // Fallback\n    UseQueryOptionsForUseQueries[]\n\n/**\n * QueriesResults reducer recursively maps type param to results\n */\nexport type QueriesResults<\n  T extends any[],\n  Result extends any[] = [],\n  Depth extends ReadonlyArray<number> = [],\n> = Depth['length'] extends MAXIMUM_DEPTH\n  ? UseQueryResult[]\n  : T extends []\n  ? []\n  : T extends [infer Head]\n  ? [...Result, GetResults<Head>]\n  : T extends [infer Head, ...infer Tail]\n  ? QueriesResults<[...Tail], [...Result, GetResults<Head>], [...Depth, 1]>\n  : T extends UseQueryOptionsForUseQueries<\n      infer TQueryFnData,\n      infer TError,\n      infer TData,\n      any\n    >[]\n  ? // Dynamic-size (homogenous) UseQueryOptions array: map directly to array of results\n    UseQueryResult<unknown extends TData ? TQueryFnData : TData, TError>[]\n  : // Fallback\n    UseQueryResult[]\n\nexport function useQueries<T extends any[]>({\n  queries,\n  context,\n}: {\n  queries: readonly [...QueriesOptions<T>]\n  context?: UseQueryOptions['context']\n}): QueriesResults<T> {\n  const queryClient = useQueryClient({ context })\n  const isRestoring = useIsRestoring()\n\n  const defaultedQueries = React.useMemo(\n    () =>\n      queries.map((options) => {\n        const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n        // Make sure the results are already in fetching state before subscribing or updating options\n        defaultedOptions._optimisticResults = isRestoring\n          ? 'isRestoring'\n          : 'optimistic'\n\n        return defaultedOptions\n      }),\n    [queries, queryClient, isRestoring],\n  )\n\n  const [observer] = React.useState(\n    () => new QueriesObserver(queryClient, defaultedQueries),\n  )\n\n  const result = observer.getOptimisticResult(defaultedQueries)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setQueries(defaultedQueries, { listeners: false })\n  }, [defaultedQueries, observer])\n\n  const errorResetBoundary = useQueryErrorResetBoundary()\n\n  defaultedQueries.forEach((query) => {\n    ensurePreventErrorBoundaryRetry(query, errorResetBoundary)\n  })\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const firstSingleResultWhichShouldThrow = result.find((singleResult, index) =>\n    getHasError({\n      result: singleResult,\n      errorResetBoundary,\n      useErrorBoundary: defaultedQueries[index]?.useErrorBoundary ?? false,\n      query: observer.getQueries()[index]!,\n    }),\n  )\n\n  if (firstSingleResultWhichShouldThrow?.error) {\n    throw firstSingleResultWhichShouldThrow.error\n  }\n\n  return result as QueriesResults<T>\n}\n"]},"metadata":{},"sourceType":"module"}