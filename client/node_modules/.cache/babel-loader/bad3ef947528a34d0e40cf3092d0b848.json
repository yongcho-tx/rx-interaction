{"ast":null,"code":"import * as React from 'react';\nimport { useSyncExternalStore } from './useSyncExternalStore.mjs';\nimport { notifyManager } from '@tanstack/query-core';\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary.mjs';\nimport { useQueryClient } from './QueryClientProvider.mjs';\nimport { useIsRestoring } from './isRestoring.mjs';\nimport { ensurePreventErrorBoundaryRetry, useClearResetErrorBoundary, getHasError } from './errorBoundaryUtils.mjs';\n\nfunction useBaseQuery(options, Observer) {\n  const queryClient = useQueryClient({\n    context: options.context\n  });\n  const isRestoring = useIsRestoring();\n  const errorResetBoundary = useQueryErrorResetBoundary();\n  const defaultedOptions = queryClient.defaultQueryOptions(options); // Make sure results are optimistically set in fetching state before subscribing or updating options\n\n  defaultedOptions._optimisticResults = isRestoring ? 'isRestoring' : 'optimistic'; // Include callbacks in batch renders\n\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(defaultedOptions.onError);\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(defaultedOptions.onSuccess);\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(defaultedOptions.onSettled);\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000;\n    }\n  }\n\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary);\n  useClearResetErrorBoundary(errorResetBoundary);\n  const [observer] = React.useState(() => new Observer(queryClient, defaultedOptions));\n  const result = observer.getOptimisticResult(defaultedOptions);\n  useSyncExternalStore(React.useCallback(onStoreChange => isRestoring ? () => undefined : observer.subscribe(notifyManager.batchCalls(onStoreChange)), [observer, isRestoring]), () => observer.getCurrentResult(), () => observer.getCurrentResult());\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, {\n      listeners: false\n    });\n  }, [defaultedOptions, observer]); // Handle suspense\n\n  if (defaultedOptions.suspense && result.isLoading && result.isFetching && !isRestoring) {\n    throw observer.fetchOptimistic(defaultedOptions).then(_ref => {\n      let {\n        data\n      } = _ref;\n      defaultedOptions.onSuccess == null ? void 0 : defaultedOptions.onSuccess(data);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(data, null);\n    }).catch(error => {\n      errorResetBoundary.clearReset();\n      defaultedOptions.onError == null ? void 0 : defaultedOptions.onError(error);\n      defaultedOptions.onSettled == null ? void 0 : defaultedOptions.onSettled(undefined, error);\n    });\n  } // Handle error boundary\n\n\n  if (getHasError({\n    result,\n    errorResetBoundary,\n    useErrorBoundary: defaultedOptions.useErrorBoundary,\n    query: observer.getCurrentQuery()\n  })) {\n    throw result.error;\n  } // Handle result property usage tracking\n\n\n  return !defaultedOptions.notifyOnChangeProps ? observer.trackResult(result) : result;\n}\n\nexport { useBaseQuery };","map":{"version":3,"mappings":"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","names":["useBaseQuery","options","Observer","queryClient","useQueryClient","context","isRestoring","useIsRestoring","errorResetBoundary","useQueryErrorResetBoundary","defaultedOptions","defaultQueryOptions","_optimisticResults","onError","notifyManager","batchCalls","onSuccess","onSettled","suspense","staleTime","ensurePreventErrorBoundaryRetry","useClearResetErrorBoundary","observer","React","useState","result","getOptimisticResult","useSyncExternalStore","useCallback","onStoreChange","undefined","subscribe","getCurrentResult","useEffect","setOptions","listeners","isLoading","isFetching","fetchOptimistic","then","data","catch","error","clearReset","getHasError","useErrorBoundary","query","getCurrentQuery","notifyOnChangeProps","trackResult"],"sources":["/Users/yong/development/assignments/module6/capstone/node_modules/@tanstack/react-query/src/useBaseQuery.ts"],"sourcesContent":["import * as React from 'react'\nimport { useSyncExternalStore } from './useSyncExternalStore'\n\nimport type { QueryKey, QueryObserver } from '@tanstack/query-core'\nimport { notifyManager } from '@tanstack/query-core'\nimport { useQueryErrorResetBoundary } from './QueryErrorResetBoundary'\nimport { useQueryClient } from './QueryClientProvider'\nimport type { UseBaseQueryOptions } from './types'\nimport { useIsRestoring } from './isRestoring'\nimport {\n  ensurePreventErrorBoundaryRetry,\n  getHasError,\n  useClearResetErrorBoundary,\n} from './errorBoundaryUtils'\n\nexport function useBaseQuery<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryData,\n  TQueryKey extends QueryKey,\n>(\n  options: UseBaseQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >,\n  Observer: typeof QueryObserver,\n) {\n  const queryClient = useQueryClient({ context: options.context })\n  const isRestoring = useIsRestoring()\n  const errorResetBoundary = useQueryErrorResetBoundary()\n  const defaultedOptions = queryClient.defaultQueryOptions(options)\n\n  // Make sure results are optimistically set in fetching state before subscribing or updating options\n  defaultedOptions._optimisticResults = isRestoring\n    ? 'isRestoring'\n    : 'optimistic'\n\n  // Include callbacks in batch renders\n  if (defaultedOptions.onError) {\n    defaultedOptions.onError = notifyManager.batchCalls(\n      defaultedOptions.onError,\n    )\n  }\n\n  if (defaultedOptions.onSuccess) {\n    defaultedOptions.onSuccess = notifyManager.batchCalls(\n      defaultedOptions.onSuccess,\n    )\n  }\n\n  if (defaultedOptions.onSettled) {\n    defaultedOptions.onSettled = notifyManager.batchCalls(\n      defaultedOptions.onSettled,\n    )\n  }\n\n  if (defaultedOptions.suspense) {\n    // Always set stale time when using suspense to prevent\n    // fetching again when directly mounting after suspending\n    if (typeof defaultedOptions.staleTime !== 'number') {\n      defaultedOptions.staleTime = 1000\n    }\n  }\n\n  ensurePreventErrorBoundaryRetry(defaultedOptions, errorResetBoundary)\n\n  useClearResetErrorBoundary(errorResetBoundary)\n\n  const [observer] = React.useState(\n    () =>\n      new Observer<TQueryFnData, TError, TData, TQueryData, TQueryKey>(\n        queryClient,\n        defaultedOptions,\n      ),\n  )\n\n  const result = observer.getOptimisticResult(defaultedOptions)\n\n  useSyncExternalStore(\n    React.useCallback(\n      (onStoreChange) =>\n        isRestoring\n          ? () => undefined\n          : observer.subscribe(notifyManager.batchCalls(onStoreChange)),\n      [observer, isRestoring],\n    ),\n    () => observer.getCurrentResult(),\n    () => observer.getCurrentResult(),\n  )\n\n  React.useEffect(() => {\n    // Do not notify on updates because of changes in the options because\n    // these changes should already be reflected in the optimistic result.\n    observer.setOptions(defaultedOptions, { listeners: false })\n  }, [defaultedOptions, observer])\n\n  // Handle suspense\n  if (\n    defaultedOptions.suspense &&\n    result.isLoading &&\n    result.isFetching &&\n    !isRestoring\n  ) {\n    throw observer\n      .fetchOptimistic(defaultedOptions)\n      .then(({ data }) => {\n        defaultedOptions.onSuccess?.(data as TData)\n        defaultedOptions.onSettled?.(data, null)\n      })\n      .catch((error) => {\n        errorResetBoundary.clearReset()\n        defaultedOptions.onError?.(error)\n        defaultedOptions.onSettled?.(undefined, error)\n      })\n  }\n\n  // Handle error boundary\n  if (\n    getHasError({\n      result,\n      errorResetBoundary,\n      useErrorBoundary: defaultedOptions.useErrorBoundary,\n      query: observer.getCurrentQuery(),\n    })\n  ) {\n    throw result.error\n  }\n\n  // Handle result property usage tracking\n  return !defaultedOptions.notifyOnChangeProps\n    ? observer.trackResult(result)\n    : result\n}\n"]},"metadata":{},"sourceType":"module"}